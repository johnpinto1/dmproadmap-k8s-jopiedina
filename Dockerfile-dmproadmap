# Command to build:
# docker build . -t jopiedina/k8s-dmproadmap:latest -f Dockerfile-dmproadmap
# docker push jopiedina/k8s-dmproadmap:latest

FROM ruby:3.3.2

# Install dependencies

RUN apt-get update -qq && \
apt-get install -y \
build-essential \
git \
libgmp3-dev \
libpq-dev \
postgresql-client \
gettext \
certbot \
wget \
curl \
vim \
ack

ARG INSTALL_PATH=/usr/src/app
ENV INSTALL_PATH=$INSTALL_PATH
ENV BUNDLE_PATH=/bundle/ \
  BUNDLE_BIN=/bundle/bin \
  GEM_HOME=/bundle
ENV Path="${BUNDLE_BIN}:${PATH}"

WORKDIR $INSTALL_PATH

RUN touch ~/.bashrc
RUN echo "alias rails='bundle exec rails'" >> ~/.bashrc
RUN echo "export EDITOR=vim" >> ~/.bashrc
RUN echo "alias racp='rails assets:clobber assets:precompile'" >> ~/.bashrc

# install yarn+node from packages
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN curl -sL https://deb.nodesource.com/setup_18.x | bash
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
RUN apt-get install -y nodejs
RUN apt-get update && apt-get install -y yarn
RUN wget --quiet https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.3/wkhtmltox-0.12.3_linux-generic-amd64.tar.xz && \
  tar vxf wkhtmltox-0.12.3_linux-generic-amd64.tar.xz && \
  cp wkhtmltox/bin/wk* /usr/local/bin/ && \
  rm -rf wkhtmltox

WORKDIR $INSTALL_PATH
# Install gems
COPY Gemfile Gemfile.lock ./
RUN gem install bundler && bundle config set without 'mysql thin' && bundle install --jobs 20 --retry 5

# Install yarn packages
COPY package.json yarn.lock ./
RUN yarn install


COPY  config/database.yml.sample  config/database.yml
COPY  config/initializers/contact_us.rb.example config/initializers/contact_us.rb
COPY  config/initializers/wicked_pdf.rb.example config/initializers/wicked_pdf.rb

# Copy application code
COPY . .

# Create a dummy database.yml for asset compilation
RUN echo "development:\n  adapter: nulldb\n  pool: 5\n  timeout: 5000" > config/database.yml

# Install the nulldb adapter for asset compilation without a database
RUN bundle add activerecord-nulldb-adapter --group production

# Precompile assets
  
#   DISABLE_DATABASE=true - This environment variable tells the Rails application to skip database connections during the asset precompilation process. This is important because:
  
#   During Docker build, there's typically no database server available
#   Asset precompilation doesn't inherently need database access
#   Setting this prevents errors related to failed database connections
#   DISABLE_SPRING=true - This environment variable disables the Spring application preloader. Spring is a Rails development tool that speeds up application boot time by keeping your application running in the background, but:
  
#   It's not needed during Docker builds
#   It can cause connection errors in containerized environments
#   It's primarily meant for development, not for production builds
#   bundle exec rails assets:precompile - This command:
  
#   Uses Bundler to ensure the correct gem versions are used
#   Runs the Rails asset pipeline to compile and minify assets (JavaScript, CSS, images)
#   Prepares assets for production deployment by optimizing them
#   This line is a best practice for Docker builds of Rails applications because it:
  
#   Avoids unnecessary database connections during build
#   Prevents Spring-related errors
#   Ensures assets are properly compiled for production use
#   Makes the Docker build process more reliable by eliminating common points of failure
#   The compiled assets will be stored in the public/assets directory within the container, ready to be served efficiently in production.

# Precompile assets with database connections disabled
RUN DISABLE_DATABASE=true DISABLE_SPRING=true bundle exec rails assets:precompile
RUN DISABLE_DATABASE=true DISABLE_SPRING=true yarn build
RUN DISABLE_DATABASE=true DISABLE_SPRING=true yarn build:css

# Restore the original database.yml
COPY config/database.yml.sample config/database.yml


# expose correct port
EXPOSE 3000

# Add gem binaries to PATH - use a simpler, more reliable approach
ENV PATH="/usr/local/bundle/bin:/usr/local/bin:${PATH}"

# Start the server
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
